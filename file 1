import { useState } from "react";
import { Plus, Clock, CheckCircle, AlertTriangle, Droplets, Sprout, Bug } from "lucide-react";
import { Button } from "./ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "./ui/card";
import { Badge } from "./ui/badge";
import { Calendar } from "./ui/calendar";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "./ui/tabs";
import { Progress } from "./ui/progress";

interface Task {
  id: string;
  title: string;
  description: string;
  type: 'irrigation' | 'fertilizer' | 'pest' | 'harvest' | 'sowing' | 'monitoring';
  priority: 'low' | 'medium' | 'high' | 'urgent';
  date: Date;
  completed: boolean;
  estimatedTime: string;
  aiRecommendation?: string;
  reasoning?: string;
}

interface Crop {
  id: string;
  name: string;
  variety: string;
  area: string;
  sowingDate: Date;
  expectedHarvest: Date;
  currentStage: string;
  progress: number;
}

export function ActionCalendar() {
  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date());
  const [activeTab, setActiveTab] = useState('calendar');

  const mockTasks: Task[] = [
    {
      id: '1',
      title: 'Morning Irrigation - Field A',
      description: 'Water wheat crop in Field A (2 acres)',
      type: 'irrigation',
      priority: 'high',
      date: new Date(),
      completed: false,
      estimatedTime: '45 minutes',
      aiRecommendation: 'Apply 25mm water based on soil moisture readings',
      reasoning: 'Soil moisture is at 35% which is below optimal 55-65% for grain filling stage'
    },
    {
      id: '2',
      title: 'Urea Application - Field B',
      description: 'Apply 50kg urea fertilizer to tomato crop',
      type: 'fertilizer',
      priority: 'medium',
      date: new Date(),
      completed: true,
      estimatedTime: '30 minutes',
      aiRecommendation: 'Apply in early morning to avoid volatilization losses'
    },
    {
      id: '3',
      title: 'Pest Monitoring - All Fields',
      description: 'Check for aphid infestation in all vegetable crops',
      type: 'pest',
      priority: 'medium',
      date: new Date(Date.now() + 86400000), // Tomorrow
      completed: false,
      estimatedTime: '1 hour',
      aiRecommendation: 'Focus on underside of leaves, check for sticky honeydew',
      reasoning: 'Weather conditions (warm, humid) favor aphid development'
    },
    {
      id: '4',
      title: 'Harvest Ready Check - Wheat',
      description: 'Check wheat maturity for harvest timing',
      type: 'harvest',
      priority: 'urgent',
      date: new Date(Date.now() + 172800000), // Day after tomorrow
      completed: false,
      estimatedTime: '2 hours',
      aiRecommendation: 'Test grain moisture content - harvest at 14-16% moisture',
      reasoning: 'Crop has reached physiological maturity based on heat unit accumulation'
    }
  ];

  const mockCrops: Crop[] = [
    {
      id: '1',
      name: 'Wheat',
      variety: 'HD-2967',
      area: '5 acres',
      sowingDate: new Date('2023-11-15'),
      expectedHarvest: new Date('2024-04-15'),
      currentStage: 'Grain Filling',
      progress: 85
    },
    {
      id: '2',
      name: 'Tomato',
      variety: 'Pusa Ruby',
      area: '1 acre',
      sowingDate: new Date('2023-12-01'),
      expectedHarvest: new Date('2024-03-30'),
      currentStage: 'Flowering',
      progress: 60
    },
    {
      id: '3',
      name: 'Mustard',
      variety: 'Pusa Bold',
      area: '2 acres',
      sowingDate: new Date('2023-10-20'),
      expectedHarvest: new Date('2024-03-20'),
      currentStage: 'Pod Development',
      progress: 75
    }
  ];

  const getTaskIcon = (type: string) => {
    switch (type) {
      case 'irrigation': return <Droplets className="w-4 h-4" />;
      case 'fertilizer': return <Sprout className="w-4 h-4" />;
      case 'pest': return <Bug className="w-4 h-4" />;
      case 'harvest': return <CheckCircle className="w-4 h-4" />;
      case 'sowing': return <Sprout className="w-4 h-4" />;
      case 'monitoring': return <AlertTriangle className="w-4 h-4" />;
      default: return <Clock className="w-4 h-4" />;
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'urgent': return 'bg-red-500 text-white';
      case 'high': return 'bg-orange-500 text-white';
      case 'medium': return 'bg-yellow-500 text-white';
      case 'low': return 'bg-green-500 text-white';
      default: return 'bg-gray-500 text-white';
    }
  };

  const getTypeColor = (type: string) => {
    switch (type) {
      case 'irrigation': return 'bg-blue-100 text-blue-800';
      case 'fertilizer': return 'bg-green-100 text-green-800';
      case 'pest': return 'bg-red-100 text-red-800';
      case 'harvest': return 'bg-purple-100 text-purple-800';
      case 'sowing': return 'bg-emerald-100 text-emerald-800';
      case 'monitoring': return 'bg-amber-100 text-amber-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const todayTasks = mockTasks.filter(task => 
    task.date.toDateString() === new Date().toDateString()
  );

  const upcomingTasks = mockTasks.filter(task => 
    task.date > new Date() && task.date <= new Date(Date.now() + 7 * 86400000)
  );

  const completedTasks = mockTasks.filter(task => task.completed);
  const pendingTasks = mockTasks.filter(task => !task.completed);

  return (
    <div className="p-4 space-y-6">
      {/* Header */}
      <div className="text-center">
        <h1 className="text-2xl font-medium mb-2">Smart Action Calendar</h1>
        <p className="text-muted-foreground">AI-powered farming schedule</p>
      </div>

      {/* Quick Stats */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="pt-4">
            <div className="text-center">
              <div className="text-2xl font-medium text-orange-600">{todayTasks.length}</div>
              <p className="text-sm text-muted-foreground">Today's Tasks</p>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-4">
            <div className="text-center">
              <div className="text-2xl font-medium text-blue-600">{upcomingTasks.length}</div>
              <p className="text-sm text-muted-foreground">This Week</p>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-4">
            <div className="text-center">
              <div className="text-2xl font-medium text-green-600">{completedTasks.length}</div>
              <p className="text-sm text-muted-foreground">Completed</p>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-4">
            <div className="text-center">
              <div className="text-2xl font-medium text-red-600">{pendingTasks.length}</div>
              <p className="text-sm text-muted-foreground">Pending</p>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Navigation Tabs */}
      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="calendar">Calendar</TabsTrigger>
          <TabsTrigger value="today">Today</TabsTrigger>
          <TabsTrigger value="crops">Crops</TabsTrigger>
          <TabsTrigger value="schedule">Schedule</TabsTrigger>
        </TabsList>

        {/* Calendar View */}
        <TabsContent value="calendar" className="space-y-6">
          <div className="grid md:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Calendar View</CardTitle>
              </CardHeader>
              <CardContent>
                <Calendar
                  mode="single"
                  selected={selectedDate}
                  onSelect={setSelectedDate}
                  className="rounded-md border"
                />
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>
                  Tasks for {selectedDate?.toLocaleDateString()}
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {mockTasks
                    .filter(task => 
                      selectedDate && task.date.toDateString() === selectedDate.toDateString()
                    )
                    .map((task) => (
                      <div key={task.id} className="flex items-start gap-3 p-3 border rounded-lg">
                        <div className={`p-2 rounded-lg ${getTypeColor(task.type)}`}>
                          {getTaskIcon(task.type)}
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-1">
                            <h4 className="font-medium text-sm">{task.title}</h4>
                            <Badge className={`text-xs ${getPriorityColor(task.priority)}`}>
                              {task.priority}
                            </Badge>
                            {task.completed && (
                              <Badge variant="outline" className="text-xs">
                                âœ“ Done
                              </Badge>
                            )}
                          </div>
                          <p className="text-xs text-muted-foreground mb-2">{task.description}</p>
                          <div className="flex items-center gap-2 text-xs text-muted-foreground">
                            <Clock className="w-3 h-3" />
                            <span>{task.estimatedTime}</span>
                          </div>
                        </div>
                      </div>
                    ))}
                  {mockTasks.filter(task => 
                    selectedDate && task.date.toDateString() === selectedDate.toDateString()
                  ).length === 0 && (
                    <p className="text-muted-foreground text-center py-4">
                      No tasks scheduled for this date
                    </p>
                  )}
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* Today's Tasks */}
        <TabsContent value="today" className="space-y-4">
          <div className="flex justify-between items-center">
            <h3 className="font-medium">Today's Schedule</h3>
            <Button size="sm">
              <Plus className="w-4 h-4 mr-1" />
              Add Task
            </Button>
          </div>

          {todayTasks.map((task) => (
            <Card key={task.id}>
              <CardContent className="pt-4">
                <div className="flex items-start gap-4">
                  <div className={`p-3 rounded-lg ${getTypeColor(task.type)}`}>
                    {getTaskIcon(task.type)}
                  </div>
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-2">
                      <h4 className="font-medium">{task.title}</h4>
                      <Badge className={`text-xs ${getPriorityColor(task.priority)}`}>
                        {task.priority}
                      </Badge>
                      {task.completed && (
                        <Badge variant="default" className="text-xs bg-green-600">
                          âœ“ Completed
                        </Badge>
                      )}
                    </div>
                    <p className="text-sm text-muted-foreground mb-3">{task.description}</p>
                    
                    {task.aiRecommendation && (
                      <div className="bg-blue-50 p-3 rounded-lg mb-3">
                        <h5 className="font-medium text-blue-900 text-sm mb-1">
                          ðŸ¤– AI Recommendation
                        </h5>
                        <p className="text-blue-800 text-sm">{task.aiRecommendation}</p>
                        {task.reasoning && (
                          <p className="text-blue-700 text-xs mt-2">
                            <strong>Why:</strong> {task.reasoning}
                          </p>
                        )}
                      </div>
                    )}

                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-4 text-sm text-muted-foreground">
                        <span className="flex items-center gap-1">
                          <Clock className="w-3 h-3" />
                          {task.estimatedTime}
                        </span>
                        <span className="capitalize">{task.type}</span>
                      </div>
                      <div className="flex gap-2">
                        {!task.completed && (
                          <Button size="sm" variant="outline">
                            Mark Complete
                          </Button>
                        )}
                        <Button size="sm">
                          View Details
                        </Button>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </TabsContent>

        {/* Crop Progress */}
        <TabsContent value="crops" className="space-y-4">
          {mockCrops.map((crop) => (
            <Card key={crop.id}>
              <CardContent className="pt-4">
                <div className="space-y-4">
                  <div className="flex justify-between items-start">
                    <div>
                      <h4 className="font-medium">{crop.name} ({crop.variety})</h4>
                      <p className="text-sm text-muted-foreground">{crop.area} â€¢ {crop.currentStage}</p>
                    </div>
                    <Badge variant="outline">{crop.progress}% Complete</Badge>
                  </div>

                  <Progress value={crop.progress} className="h-2" />

                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="text-muted-foreground">Sowing Date:</span>
                      <p className="font-medium">{crop.sowingDate.toLocaleDateString()}</p>
                    </div>
                    <div>
                      <span className="text-muted-foreground">Expected Harvest:</span>
                      <p className="font-medium">{crop.expectedHarvest.toLocaleDateString()}</p>
                    </div>
                  </div>

                  <div className="flex gap-2">
                    <Button size="sm" variant="outline">
                      View Schedule
                    </Button>
                    <Button size="sm" variant="outline">
                      Update Status
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </TabsContent>

        {/* Full Schedule */}
        <TabsContent value="schedule" className="space-y-4">
          <div className="space-y-6">
            <div>
              <h3 className="font-medium mb-3">This Week's Tasks</h3>
              <div className="space-y-3">
                {upcomingTasks.map((task) => (
                  <div key={task.id} className="flex items-center gap-3 p-3 border rounded-lg">
                    <div className={`p-2 rounded-lg ${getTypeColor(task.type)}`}>
                      {getTaskIcon(task.type)}
                    </div>
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-1">
                        <h4 className="font-medium text-sm">{task.title}</h4>
                        <Badge className={`text-xs ${getPriorityColor(task.priority)}`}>
                          {task.priority}
                        </Badge>
                      </div>
                      <div className="flex items-center gap-4 text-xs text-muted-foreground">
                        <span>{task.date.toLocaleDateString()}</span>
                        <span className="flex items-center gap-1">
                          <Clock className="w-3 h-3" />
                          {task.estimatedTime}
                        </span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div>
              <h3 className="font-medium mb-3">Recently Completed</h3>
              <div className="space-y-3">
                {completedTasks.slice(0, 3).map((task) => (
                  <div key={task.id} className="flex items-center gap-3 p-3 border rounded-lg opacity-60">
                    <div className={`p-2 rounded-lg ${getTypeColor(task.type)}`}>
                      {getTaskIcon(task.type)}
                    </div>
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-1">
                        <h4 className="font-medium text-sm line-through">{task.title}</h4>
                        <Badge variant="default" className="text-xs bg-green-600">
                          âœ“ Done
                        </Badge>
                      </div>
                      <p className="text-xs text-muted-foreground">{task.date.toLocaleDateString()}</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}
